// Copyright (c) 2013 Rice University
// This software is subject to the provisions of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3.0 (AGPL).
// See LICENSE.txt for details.

// Page Breaking Debugging Macro for CCAP texts

@DEBUG_PB: 0;

// # Visual Page Breaks (debugging)

// Color:
// - blue: always
// - red: avoid
// - yellow: auto

// Border/Fill:
// - background: inside
// - dashed: before
// - dotted: after

@pb-color-auto: #ff3;
@pb-color-avoid: #f33;
@pb-color-always: #33f;

@pb-color-light-auto: #ff9;
@pb-color-light-avoid: #f99;
@pb-color-light-always: #99f;

#pb {

  // Note: Prefix .pb-debug() because LESS will "unlock" nested mixins and we do not want conflicts

  .inside-x(@value, @color) {
    page-break-inside: @value;
    // Only put in the DEBUG rule when DEBUG is ON
    .pb-debug(@color) when (@DEBUG_PB > 0) {
      background-color: @color !important;
    }
    .pb-debug(@color);
  }

  .before-x(@value, @color) {
    page-break-before: @value;
    // Only put in the DEBUG rule when DEBUG is ON
    .pb-debug(@color) when (@DEBUG_PB > 0) {
      border-left: 0.9px dotted @color !important;
    }
    .pb-debug(@color);
  }

  .after-x(@value, @color) {
    page-break-after: @value;
    // Only put in the DEBUG rule when DEBUG is ON
    .pb-debug(@color) when (@DEBUG_PB > 0) {
      border-right: 0.9px dotted @color !important;
    }
    .pb-debug(@color);
  }

  .inside(auto)    { .inside-x(auto,    @pb-color-light-auto); }
  .inside(avoid)   { .inside-x(avoid,   @pb-color-light-avoid); }
  .inside(always)  { .inside-x(always,  @pb-color-light-always); }
  .inside(left)    { .inside-x(left,    @pb-color-light-always); }
  .inside(right)   { .inside-x(right,   @pb-color-light-always); }

  .before(auto)    { .before-x(auto,    @pb-color-auto); }
  .before(avoid)   { .before-x(avoid,   @pb-color-avoid); }
  .before(always)  { .before-x(always,  @pb-color-always); }
  .before(left)    { .before-x(left,    @pb-color-always); }
  .before(right)   { .before-x(right,   @pb-color-always); }

  .after(auto)     { .after-x(auto,     @pb-color-auto); }
  .after(avoid)    { .after-x(avoid,    @pb-color-avoid); }
  .after(always)   { .after-x(always,   @pb-color-always); }
  .after(left)     { .after-x(left,     @pb-color-always); }
  .after(right)    { .after-x(right,    @pb-color-always); }

}
