#!/bin/bash

# Resolve all dependencies that the application requires to run.
# From https://github.com/github/scripts-to-rule-them-all/blob/master/script/bootstrap

set -e

cd "$(dirname "$0")/.."

if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  >&2 echo "==> Updating Homebrew…"
  brew update || exit 1

  brew bundle check >/dev/null 2>&1  || {
    >&2 echo "==> Installing Homebrew dependencies…"
    brew bundle || exit 1
  }
fi


if [[ ! "${CI}" = "true" && ! $(which virtualenv) ]]; then
  >&2 echo "ERROR: virtualenv (Python Virtualenv) is not installed. Please install it"
  exit 1
fi

if [[ ! "${CI}" = "true" && ! $(which node) ]]; then
  >&2 echo "ERROR: node (NodeJS) is not installed. Please install it by going to https://github.com/creationix/nvm"
  exit 1
fi



>&2 echo "==> Installing Node package dependencies"
>&2 echo "Using node: $(node --version)"
>&2 echo "Using npm: $(npm --version)"

# Install https://yarnpkg.com (package manager)
if [[ ! $(which yarn) ]]; then
  # Prompt when on debian
  if [[ $(which apt-key) ]]; then
    read -p "Would you like to install yarn (y/N)? This will use sudo to install a 3rd party apt repository, and install the yarn package." choice
    echo # Move to a new line
    if [[ "${choice}" =~ ^[Yy]$ ]]; then
      >&2 echo "==> Installing yarn. You may be prompted for a password"
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - || exit 1
      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list || exit 1
      sudo apt-get update && sudo apt-get install yarn || exit 1
    else
      echo "Yarn is not installed. Exiting"
      echo "To install yarn manually, follow the instructions at https://yarnpkg.com/en/docs/install#linux-tab"
      exit 1
    fi
  else
    echo "Not sure how to install yarn automatically. If you are using macOS do you have https://brew.sh installed?"
    echo "To install yarn manually, follow the instructions at https://yarnpkg.com"
    exit 1
  fi
fi

# Note: Skip rbenv for Travis because it already has ruby
if [ ! "${CI}" = "true" ] && [ -f ".ruby-version" ]; then
  if [[ -n $(which rbenv) ]]; then

    rbenv_version="$(rbenv version-name 2>/dev/null)"
    if [ -z "${rbenv_version}" ]; then
      >&2 echo "==> Installing Ruby…"
      rbenv install --skip-existing || {
        echo "WARNING: 'rbenv install' errored. I am assuming you know what you are doing (and have sass installed locally) so continuing"
        exit 0
      }
    else
      echo "Using rbenv ruby: ${rbenv_version}"
    fi
  else
    >&2 echo "WARNING: Skipping rbenv. Using local ruby"
  fi

  # Initialize rbenv (if installed)
  [[ -n $(which rbenv) ]] && eval "$(rbenv init -)"

  gem list -i bundler >/dev/null 2>&1  || {
    >&2 echo "==> Installing Ruby Bundler gem…"
    gem install bundler || {
      >&2 echo ''
      >&2 echo ''
      >&2 echo '--------------- Error -------------'
      >&2 echo 'Problem installing ruby bundler.'
      exit 1
    }

    [[ -n $(which rbenv) ]] && rbenv rehash

  }
fi

if [ -f "Gemfile" ]; then
  >&2 echo "==> Installing gem dependencies…"
  which bundle
  bundle check --path vendor/gems >/dev/null 2>&1  || {
    bundle install --path vendor/gems --quiet --without production
  }
fi


which xmllint >/dev/null 2>&1 || {
  >&2 echo "ERROR: xmllint is not installed. Please install it first"
  exit 1
}
