#!/bin/bash

# Resolve all dependencies that the application requires to run.
# From https://github.com/github/scripts-to-rule-them-all/blob/master/script/bootstrap

cd "$(dirname "$0")/.."


# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
if [[ $(tput colors) -ge 8 ]]; then
  c_none=$(tput sgr0)
  c_red=$(tput setaf 1)
  c_green=$(tput setaf 2)
  c_blue=$(tput setaf 4)
  c_purple=$(tput setaf 5)
  c_dark=$(tput setaf 8)
  c_yellow=$(tput setaf 11)
  c_cyan=$(tput setaf 14)
fi

_say() { echo -e "$1"; }
progress() { _say "${c_yellow}==>${c_none} $1"; }
# https://stackoverflow.com/a/25515370
yell() { >&2 _say "$0: ${c_red}$*${c_none}"; }
die() {
  yell "$1"
  if [[ $2 ]]; then
    err_code=$2
  else
    err_code=112
  fi
  exit ${err_code}
}
try() { "$@" || die "${c_red}ERROR: could not run [$*]${c_none}" 112; }

do_progress() { progress "$1"; try "${@:2}"; }

# Alternative that outputs only when an error occurs
_quiet_progress() { echo -e -n "${c_yellow}==>${c_none} $1 ${c_dark}...${c_none} "; }
_quiet_try() {
  _myout=$(mktemp -t 'stdout')
  _myerr=$(mktemp -t 'stderr')
  "$@" > ${_myout} 2> ${_myerr} || {
    echo "" # start on a new line
    cat ${_myout}
    >&2 cat ${_myerr}
    rm ${_myout} ${_myerr}
    die "${c_red}ERROR: could not run [$*]${c_none}"
  }
  rm ${_myout} ${_myerr}
}
_quiet_ok() { _say "${c_green}OK${c_none}"; }
do_progress_quiet() {
  # Keep it loud when running in Travis or Jenkins
  if [[ "${CI}" == "true" || "${JENKINS_URL}" != "" || "${DEBUG}" || "${VERBOSE}" ]]; then
    do_progress "$@"
  else
    _quiet_progress "$1"
    _quiet_try "${@:2}" # Skip the 1st arg but use the rest
    _quiet_ok
  fi
}



if [[ -f "Brewfile" ]] && [[ "$(uname -s)" = "Darwin" ]]; then
  [[ $(which brew) ]] || die "Homebrew is not installed. See https://brew.sh"
  brew bundle check >/dev/null 2>&1  || {
    do_progress "Installing Homebrew dependencies…" \
      brew bundle
  }
fi


if [[ ! "${CI}" = "true" && -f "./setup.py" && ! $(which virtualenv) ]]; then
  if [[ -z "$(which virtualenv)" ]]; then
    if [[ -f "Brewfile" ]] && [[ "$(uname -s)" = "Darwin" ]]; then
      do_progress_quiet "Unlinking homebrew python (just-in-case)" \
        brew unlink python
      do_progress_quiet "Relinking homebrew python" \
        brew link python
    fi

    do_progress_quiet "Installing Python virtualenv" \
      pip install virtualenv
  fi
fi

[[ $(which node) ]] || die "ERROR: node (NodeJS) is not installed. Install it by going to https://github.com/creationix/nvm"



# Install https://yarnpkg.com (package manager)
if [[ -f "./package.json" && ! $(which yarn) ]]; then
  # Prompt when on debian
  if [[ $(which apt-key) ]]; then
    read -p "Would you like to install yarn (y/N)? This will use sudo to install a 3rd party apt repository, and install the yarn package." choice
    echo # Move to a new line
    if [[ "${choice}" =~ ^[Yy]$ ]]; then
      progress "Installing yarn. You may be prompted for a password"
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - || exit 1
      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list || exit 1
      sudo apt-get update && sudo apt-get install yarn || exit 1
    else
      die "ERROR: Yarn is not installed. To install yarn manually, follow the instructions at https://yarnpkg.com/en/docs/install#linux-tab"
    fi
  else
    die "Not sure how to install yarn automatically. If you are using macOS do you have https://brew.sh installed?. To install yarn manually, follow the instructions at https://yarnpkg.com"
  fi
fi

# Note: Skip rbenv for Travis because it already has ruby
if [[ ! "${CI}" = "true" ]] && [[ -f ".ruby-version" ]]; then
  if [[ -n $(which rbenv) ]]; then

    rbenv_version="$(rbenv version-name 2>/dev/null)"
    if [[ -z "${rbenv_version}" ]]; then
      progress "Installing Ruby…"
      rbenv install --skip-existing || {
        echo "WARNING: 'rbenv install' errored. I am assuming you know what you are doing (and have sass installed locally) so continuing"
        exit 0
      }
    else
      echo "Using rbenv ruby: ${rbenv_version}"
    fi
  else
    >&2 echo "WARNING: Skipping rbenv. Using local ruby"
  fi

  # Initialize rbenv (if installed)
  [[ -n $(which rbenv) ]] && eval "$(rbenv init -)"

  gem list -i bundler >/dev/null 2>&1  || {
    progress "Installing Ruby Bundler gem…"
    gem install bundler || {
      >&2 echo ''
      >&2 echo ''
      >&2 echo '--------------- Error -------------'
      >&2 echo 'Problem installing ruby bundler.'
      exit 1
    }

    [[ -n $(which rbenv) ]] && rbenv rehash

  }
fi

if [[ -f "Gemfile" ]]; then
  progress "Installing gem dependencies…"
  which bundle
  bundle check --path vendor/gems >/dev/null 2>&1  || {
    bundle install --path vendor/gems --quiet --without production
  }
fi


which xmllint >/dev/null 2>&1 || {
  die "ERROR: xmllint is not installed. Please install it first"
}
