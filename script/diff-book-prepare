#!/bin/bash
cd "$(dirname "$0")/.."
source ./script/bootstrap || exit 1

book_name=${1}

if [[ ! ${book_name} || ! -d "./data/${book_name}/" ]]; then
  if [[ -d "./data/" && $(ls ./data/) ]]; then
    echo "A valid book name (directory in ./data/) needs to be specified. Try running ./script/fetch-book ... first. Valid options are:"
    echo $(ls ./data/)
    exit 1
  else
    die "No source files in ./data/ exist. Please unzip a complete zip and name it something that matches one of the ccap-* names (without the ccap- prefix) OR use './script/fetch-book {book_name}' to do it for you"
  fi
else

  css_file="./css/ccap-${book_name}.css"
  xhtml_file="./out/${book_name}-temp/collection.prepared.xhtml"
  xhtml_and_css_file="./out/${book_name}-temp/collection.prepared.out.xhtml"

  xhtml_file_pretty="./out/${book_name}-temp/collection.prepared.pretty.xhtml"

  pdf_file="./out/${book_name}.prepared.pdf"
  pdf_initial_file="./out/${book_name}.pdf" # This is generated by ./script/build-pdf

  if [[ ! ${SKIP_PDF} ]]; then
    do_progress_quiet "Building PDF (and XHTML)" \
      ./script/build-pdf ${book_name} "collection.prepared.xhtml"

    # Move the PDF so it is remembered. build-pdf always generates ./out/${book_name}.pdf
    try mv "${pdf_initial_file}" "${pdf_file}"
  fi

  [[ -d "./out/${book_name}-temp/prepared-pages/" ]] && try rm -rf "./out/${book_name}-temp/prepared-pages/"
  [[ -d "./out/${book_name}-temp/_prepared-pages/" ]] && try rm -rf "./out/${book_name}-temp/_prepared-pages/"

  # create the directory for the PDF images if it does not exist
  [[ -d "./out/${book_name}-temp/_prepared-pages/" ]] || try mkdir -p "./out/${book_name}-temp/_prepared-pages/"

  do_progress_quiet "Generating images for each page in the PDF" \
    convert "${pdf_file}" "./out/${book_name}-temp/_prepared-pages/page-%04d.png"

  # do_progress_quiet "Building XHTML with CSS 'baked in'" \
  #   "$(npm bin)/css-plus" --diffmodeclassnames --nostrict --timeout 0 --html "${xhtml_file}" --css "${css_file}" --output "${xhtml_and_css_file}"

  # pretty-print the XHTML files so it is easier to diff
  xmllint --pretty 2 "${xhtml_file}"         > "${xhtml_file_pretty}"
fi
